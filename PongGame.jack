// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
/**
 * Represents a Pong game.
 */
class PongGame {
    static PongGame instance; // A Pong game     
    field Bat bat;    // Raquete do 1º Jogador, Inferior
    field Bat topBat; // Raquete do 2º Jogador, Superior
    field Ball ball;          // ball
    field int wall;           // current wall that the ball is bouncing off of
    field boolean exit;       // true when the game is over
    field int score;          // current score
    field int lastWall;       // last wall that the ball bounced off of

    // The current width of the bat
    field int batWidth;

    /** Constructs a new Pong game. */
    constructor PongGame new() {
	    do Screen.clearScreen();
        let batWidth = 50;  // Tamanho da Raquete (Fixo)
        let bat = Bat.new(230, 229, batWidth, 7); // Raquete do 1º Jogador, Inferior
        let topBat = Bat.new(230, 1, batWidth, 7); // Raquete do 2º Jogador, Superior
        
        let ball = Ball.new(253, 222, 0, 511, 9, 229);
        do ball.setDestination(400,0);
	
	    let exit = false;
	    let score = 0;
	    let wall = 0;
	    let lastWall = 0;

        return this;
    }

    /** Deallocates the object's memory. */
    method void dispose() {
        do bat.dispose();
	    do ball.dispose();
        do Memory.deAlloc(this);
        return;
    }

    /** Creates an instance of a Pong game. */
    function void newInstance() {
        let instance = PongGame.new();
        return;
    }
    
    /** Returns this Pong game. */
    function PongGame getInstance() {
        return instance;
    }

    /** Starts the game, and handles inputs from the user that control
     *  the bat's movement direction. */
    method void run() {
        var char key;

        while (~exit) {
            // waits for a key to be pressed.
            while ((key = 0) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move(); // Coloca movimento na raquete do 1º Jogador
                do topBat.move(); // Coloca movimento na raquete do 2º Jogador
                do moveBall();
                do Sys.wait(50);
            }

            if (key = 130) { do bat.setDirection(1); } // Movimento do 1º Jogador
	        else {
	            if (key = 132) { do bat.setDirection(2); } // Movimento do 1º Jogador
		        else {
                    if ((key = 97) | (key = 65)) { do topBat.setDirection(1); } // Movimento do 2º Jogador - Esquerda, Letra 'A' ou 'a'
                    else {
                        if ((key = 100) | (key = 68)) { do topBat.setDirection(2); } // Movimento do 2º Jogador, Direita, Letra 'D' ou 'd'
                        else {
                        if (key = 140) { let exit = true; }
		        }
            }
        }
     }
            while ((~(key = 0)) & (~exit)) {
                let key = Keyboard.keyPressed();
                do bat.move();
                do topBat.move(); // Espelha o comportamento da raquete superior com a do 1º Jogador
                do moveBall();
                do Sys.wait(50);
            }
        }
        return;
    }
    /**
     * Handles ball movement, including bouncing.
     * If the ball bounces off a wall, finds its new direction.
     * If the ball bounces off the bat, increases the score by one
     * and shrinks the bat's size, to make the game more challenging. 
     */
    method void moveBall() {
        var int bouncingDirection, batLeft, batRight, topBatLeft, topBatRight, ballLeft, ballRight;

        let wall = ball.move();

        if ((wall > 0) & (~(wall = lastWall))) {
            let lastWall = wall;
            let bouncingDirection = 0;
            // Aqui obtemos as posições das raquetes e da Bola
            // Raquete do 1º Jogador
            let batLeft = bat.getLeft();
            let batRight = bat.getRight();
            // Raquete do 2º Jogador
            let topBatLeft = topBat.getLeft();
            let topBatRight = topBat.getRight();  
            // Bola
            let ballLeft = ball.getLeft();
            let ballRight = ball.getRight();
  
            if (wall = 4) { // Bola atinge a parede inferior
                // Verifica se a bola atingiu a raquete do 1º Jogador
                let exit = (batLeft > ballRight) | (batRight < ballLeft);
                if (~exit) { 
                    if (ballRight < (batLeft + 10)) { let bouncingDirection = -1; }
                    else {
                        if (ballLeft > (batRight - 10)) { let bouncingDirection = 1; }
                    }
                    // Aumento do placar e diminuição do tamanho da Bat foram removidas do código original
                } else { // 1º Jogador perde
                    do Output.moveCursor(10,20);
                    do Output.printString("JOGADOR 2 VENCEU"); 
                }
            }
            else { // A bola atingiu outra parede (esquerda, direita ou superior)
                if (wall = 3) { // Em caso de parede superior 
                    let exit = (topBatLeft > ballRight) | (topBatRight < ballLeft);
                    if (~exit) { 
                        if (ballRight < (topBatLeft + 10)) { let bouncingDirection = -1; }
                        else {
                            if (ballLeft > (topBatRight - 10)) { let bouncingDirection = 1; }
                        }
                    } else { // 2º Jogador perde
                        do Output.moveCursor(10,20);
                        do Output.printString("JOGADOR 1 VENCEU"); 
                    }
                }
                // As colisões com as paredes laterais (wall = 1 ou wall = 2) não terminam o jogo
            }

            // Se o jogo não terminou, a bola continua rebatendo

            if (~exit) {
                do ball.bounce(bouncingDirection);
            }
        }
        return;
    }}